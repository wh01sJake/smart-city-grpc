package com.smartcity.client;

import com.smartcity.*;
import com.smartcity.Alert;
import io.grpc.*;
import io.grpc.stub.StreamObserver;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public class CityDashboard extends Application {
    // gRPC communication channel
    private ManagedChannel channel;
    // Service registry stub
    private RegistryGrpc.RegistryBlockingStub registryStub;
    
    // Service discovery components
    private final ObservableList<String> serviceList = FXCollections.observableArrayList();
    
    // Bin service components
    private final ObservableList<BinStatusItem> urgentBinItems = FXCollections.observableArrayList();
    private final Map<String, BinStatusItem> binStatusMap = new HashMap<>();
    private Label binStatsLabel;
    
    // Traffic service components
    private final Map<String, IntersectionStatusItem> intersectionMap = new HashMap<>();
    private final AtomicInteger totalVehicleCount = new AtomicInteger(0);
    private Label trafficStatsLabel;
    
    // Noise service components
    private final ObservableList<NoiseZoneItem> noiseZoneItems = FXCollections.observableArrayList();
    private final Map<String, NoiseZoneItem> noiseZoneMap = new HashMap<>();
    private int alertCount = 0;
    private Label noiseStatsLabel;
    private StreamObserver<NoiseData> activeNoiseStream;
    private boolean isNightTime = false;
